#include "nr3.h"
#include "utilities.h"
#include "ludcmp.h"
#include <iostream>
#include <cmath>

using namespace std;

Doub T1 = 1000.0;
Doub T2 = 500.0;
Doub eps1 = 0.8;
Doub eps2 = 0.6;
Doub sig = 1.712*pow(10,-9);
Doub d = 1.0;
Doub w = 1.0;       //Omega
Doub a = (-0.5)*w;  //Lower limit of integrals
Doub b = 0.5*w;     //Upper limit of integrals

Doub c1 = eps1*sig*pow(T1,4);
Doub c2 = eps2*sig*pow(T2,4);
Doub k1 = -(1-eps1);
Doub k2 = -(1-eps2);

Doub Q1 = 0;
Doub Q2 = 0;

//VecDoub x(5);
//x[0] = -0.5, x[1] = -0.25, x[2] = 0, x[3] = 0.25, x[4] = 0.5;
//VecDoub y(5);
//y[0] = -0.5, y[1] = -0.25, y[2] = 0, y[3] = 0.25, y[4] = 0.5;

Doub f(Doub x, Doub y){
    return ( (1.0/2.0) * (1/pow( ( pow(d,2)+pow( (x-y),2 ) ),(3.0/2.0) ) ) );
}

template<class T>
void exercise2(int n, T &func){
    Doub h = (b-a)/n;
    MatDoub A(2*(n+1), 2*(n+1));
    VecDoub B(2*(n+1));

    for(int i = 0 ; i<2*(n+1) ; i++){
        if( i<(n+1) ){
            B[i] = c1;
        }
        if( i>(n) ){
            B[i] = c2;
        }
    }

    for(int i = 0 ; i<2*(n+1) ; i++){
        for(int j =0 ; j<2*(n+1) ; j++){
            if(i==j){
                A[i][j] = 1;
            }
            else{
                A[i][j] = 0;   
            }
        }
    }

    int l = 0, g = 0;
    for(int i = 0 ; i<2*(n+1) ; i++){
        for(int j = 0; j<2*(n+1) ; j++){

            if( i<(n+1) && j>(n) ){
                A[i][j] = k1*h*func(a+i*h, a+l*h);
                l++;
            }
            if( i>n && j<(n+1) ){
                A[i][j] = k2*h*func(a+j*h, a+(i-(n+1))*h);
            }
        }
        l=0;
    }

    for(int i = 0;i<2*(n+1); i++){
        for(int j = 0;j<2*(n+1); j++){
            if( i<(n+1) && (j == n+1 || j == 2*n+1 )){
                A[i][j] *= 0.5;
            }
            if( i>n && (j == 0 || j == n)){
                A[i][j] *= 0.5;
            }
        }
    }

    //LU-decompostion
    VecDoub_O x_output(2*(n+1));
    LUdcmp lu(A);
    lu.solve(B,x_output);

    VecDoub test(2*(n+1));
    test = operator*(A, x_output);
    //util::print(x_output);
    

    //Task 2 determine Q1 & Q2
    Doub temp = 0;
    Doub temp2 = 0;
    Doub temp3 = 0;
    Doub temp4 = 0;
    for(int i = 0; i<n+1; i++){
        for(int j = 0; j<n+1; j++){
            temp = h*func(a+i*h,a+j*h)*x_output[j+n+1];
            if(j == 0 || j == n){
                temp = temp*0.5;
            }
            temp2 +=temp;
            temp = 0;
        }
        temp3 = h*x_output[i]-temp2;
        if(i==0 || i == n){
            temp3 = temp3*0.5;
        }
        temp4 += temp3;
        temp3 = 0;
        temp2 = 0;

    }
    Q1 = temp4;
    cout << Q1 << " Q1\n";

    temp = 0;
    temp2 = 0;
    temp3 = 0;
    temp4 = 0;
    for(int i = 0; i<n+1; i++){
        for(int j = 0; j<n+1; j++){
            temp = h*func(a+j*h,a+i*h)*x_output[j];
            if(j == 0 || j == n){
                temp = temp*0.5;
            }
            temp2 +=temp;
            temp = 0;
        }
        temp3 = h*x_output[i+(n+1)]-temp2;
        if(i==0 || i==n){
            temp3 = temp3*0.5;
        }
        temp4 += temp3;
        temp3 = 0;
        temp2 = 0;

    }
    Q2 = temp4;
    cout << Q2 << " Q2\n";
}

int main(){
    const int n = 4;
    //cout <<  f(3,2,0.5);
    exercise2(n,f);
}
